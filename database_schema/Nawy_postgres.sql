-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.area
(
    area_id integer NOT NULL,
    area_name character varying(512) COLLATE pg_catalog."default",
    lat double precision,
    "long" double precision,
    CONSTRAINT area_pkey PRIMARY KEY (area_id)
);

CREATE TABLE IF NOT EXISTS public.compound
(
    compound_id integer NOT NULL,
    compound_name character varying(255) COLLATE pg_catalog."default",
    is_super boolean,
    properties_count integer,
    developer_id integer,
    area_id integer,
    min_price numeric,
    max_price numeric,
    max_unit_area integer,
    max_available_bathrooms integer,
    min_available_bathrooms integer,
    max_available_bedrooms integer,
    min_available_bedrooms integer,
    sponsored boolean,
    max_installment_years integer,
    min_down_payment integer,
    sum_10_properties_min_price numeric,
    has_offer boolean,
    offer_title character varying(255) COLLATE pg_catalog."default",
    limited_time_offer boolean,
    has_launches boolean,
    is_launch boolean,
    min_ready_by date,
    min_unit_area integer,
    CONSTRAINT compound_pkey PRIMARY KEY (compound_id)
);

CREATE TABLE IF NOT EXISTS public.developer
(
    developer_id integer NOT NULL,
    developer_logo character varying(512) COLLATE pg_catalog."default",
    developer_name character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT developer_pkey PRIMARY KEY (developer_id)
);

CREATE TABLE IF NOT EXISTS public.property
(
    "propertyID" integer NOT NULL,
    "propertyName" character varying(255) COLLATE pg_catalog."default",
    "propertyTypeID" integer,
    compound_id integer,
    "areaID" integer,
    developer_id integer,
    finishing character varying(255) COLLATE pg_catalog."default",
    unit_area double precision,
    min_price numeric,
    max_price numeric,
    max_installment_years double precision,
    min_installments integer,
    min_down_payment numeric,
    number_of_bathrooms integer,
    number_of_bedrooms integer,
    min_ready_by date,
    sponsored integer,
    new_property boolean,
    resale boolean,
    financing boolean,
    has_offers boolean,
    offer_title character varying(255) COLLATE pg_catalog."default",
    limited_time_offer boolean,
    in_quick_search integer,
    manual_ranking double precision,
    completeness_score integer,
    ranking_type character varying(255) COLLATE pg_catalog."default",
    recommended_financing double precision,
    property_ranking double precision,
    compound_ranking double precision,
    tag character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT property_pkey PRIMARY KEY ("propertyID")
);

CREATE TABLE IF NOT EXISTS public.property_type
(
    id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    "propertyID" integer NOT NULL,
    CONSTRAINT property_type_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.property_types_count
(
    property_id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    count_ integer,
    total integer,
    rank integer,
    compound_id integer NOT NULL,
    CONSTRAINT property_types_count_pkey PRIMARY KEY (property_id, compound_id)
);

ALTER TABLE IF EXISTS public.compound
    ADD CONSTRAINT area_compound_id_fkey FOREIGN KEY (area_id)
    REFERENCES public.area (area_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.compound
    ADD CONSTRAINT develpoer_compound_id_fkey FOREIGN KEY (developer_id)
    REFERENCES public.developer (developer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.property
    ADD CONSTRAINT "property_areaID_fkey" FOREIGN KEY ("areaID")
    REFERENCES public.area (area_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.property
    ADD CONSTRAINT property_compound_id_fkey FOREIGN KEY (compound_id)
    REFERENCES public.compound (compound_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.property
    ADD CONSTRAINT property_developer_id_fkey FOREIGN KEY (developer_id)
    REFERENCES public.developer (developer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.property_type
    ADD CONSTRAINT "property_type_propertyID_fkey" FOREIGN KEY ("propertyID")
    REFERENCES public.property ("propertyID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.property_types_count
    ADD CONSTRAINT property_types_count_compound_id_fkey FOREIGN KEY (compound_id)
    REFERENCES public.compound (compound_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
